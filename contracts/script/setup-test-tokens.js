const { ethers } = require('hardhat')

// Mock ERC20 Token ABI
const ERC20_ABI = [
  'function name() view returns (string)',
  'function symbol() view returns (string)',
  'function decimals() view returns (uint8)',
  'function totalSupply() view returns (uint256)',
  'function balanceOf(address) view returns (uint256)',
  'function transfer(address to, uint256 amount) returns (bool)',
  'function approve(address spender, uint256 amount) returns (bool)',
  'function allowance(address owner, address spender) view returns (uint256)',
  'function mint(address to, uint256 amount) returns (bool)',
  'constructor(string memory name, string memory symbol)'
]

// Simple Mock Token Contract
const MOCK_TOKEN_BYTECODE = '0x608060405234801561001057600080fd5b506040516109c93803806109c98339818101604052810190610032919061017a565b8181600390816100429190610421565b5080600490816100529190610421565b50505050506104f3565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6100c582610080565b810181811067ffffffffffffffff821117156100e4576100e3610091565b5b80604052505050565b60006100f761005d565b905061010382826100bc565b919050565b600067ffffffffffffffff82111561012357610122610091565b5b61012c82610080565b9050602081019050919050565b60005b8381101561015757808201518184015260208101905061013c565b60008484015250505050565b600061017661017184610108565b6100ed565b90508281526020810184848401111561019257610191610079565b5b61019d848285610139565b509392505050565b600082601f8301126101ba576101b9610074565b5b81516101ca848260208601610163565b91505092915050565b6000806040838503121561021a57610219610067565b5b600083015167ffffffffffffffff8111156102385761023761006c565b5b610244858286016101a5565b925050602083015167ffffffffffffffff8111156102655761026461006c565b5b610271858286016101a5565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806102cd57607f821691505b6020821081036102e0576102df610286565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103487fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261030b565b610352868361030b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061039961039461038f8461036a565b610374565b61036a565b9050919050565b6000819050919050565b6103b38361037e565b6103c76103bf826103a0565b848454610318565b825550505050565b600090565b6103dc6103cf565b6103e78184846103aa565b505050565b5b8181101561040b576104006000826103d4565b6001810190506103ed565b5050565b601f8211156104505761042181610296565b61042a846102fa565b81016020851015610439578190505b61044d610445856102fa565b8301826103ec565b50505b505050565b600082821c905092915050565b600061047360001984600802610455565b1980831691505092915050565b600061048c8383610462565b9150826002028217905092915050565b6104a58261027b565b67ffffffffffffffff8111156104be576104bd610091565b5b6104c882546102b5565b6104d382828561040f565b600060209050601f83116001811461050657600084156104f4578287015190505b6104fe8582610480565b865550610566565b601f19841661051486610296565b60005b8281101561053c57848901518255600182019150602085019450602081019050610517565b868310156105595784890151610555601f891682610462565b8355505b6001600288020188555050505b505050505050565b6104c7806105036000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461013457806370a082311461015257806395d89b4114610182578063a9059cbb146101a0578063dd62ed3e146101d057610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a0610200565b6040516100ad9190610254565b60405180910390f35b6100d060048036038101906100cb9190610309565b610292565b6040516100dd9190610364565b60405180910390f35b6100ee6102b5565b6040516100fb919061038e565b60405180910390f35b61011e600480360381019061011991906103a9565b6102bf565b60405161012b9190610364565b60405180910390f35b61013c6102ee565b6040516101499190610418565b60405180910390f35b61016c60048036038101906101679190610433565b6102f7565b604051610179919061038e565b60405180910390f35b61018a61033f565b6040516101979190610254565b60405180910390f35b6101ba60048036038101906101b59190610309565b6103d1565b6040516101c79190610364565b60405180910390f35b6101ea60048036038101906101e59190610460565b6103f4565b6040516101f7919061038e565b60405180910390f35b60606003805461020f906104cf565b80601f016020809104026020016040519081016040528092919081815260200182805461023b906104cf565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b60008061029d61047b565b90506102aa818585610483565b600191505092915050565b6000600254905090565b6000806102ca61047b565b90506102d7858285610495565b6102e2858585610529565b60019150509392505050565b60006012905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461034e906104cf565b80601f016020809104026020016040519081016040528092919081815260200182805461037a906104cf565b80156103c75780601f1061039c576101008083540402835291602001916103c7565b820191906000526020600020905b8154815290600101906020018083116103aa57829003601f168201915b5050505050905090565b6000806103dc61047b565b90506103e9818585610529565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b6104908383836001610620565b505050565b60006104a184846103f4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146105235781811015610513578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161050a93929190610509565b60405180910390fd5b61052284848484036000610620565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361059b5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016105929190610540565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361060d5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016106049190610540565b60405180910390fd5b6106188383836107f7565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036106925760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016106899190610540565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107045760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016106fb9190610540565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015156107f157828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516107e8919061038e565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108495780600260008282546108439190610588565b92505081905550610919565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156108d5578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016108cc93929190610509565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109625780600260008282540392505081905550610a9c565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516109f9919061038e565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a40578082015181840152602081019050610a25565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a6882610a06565b610a728185610a11565b9350610a82818560208601610a22565b610a8b81610a4c565b840191505092915050565b60006020820190508181036000830152610ab08184610a5d565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ae882610abd565b9050919050565b610af881610add565b8114610b0357600080fd5b50565b600081359050610b1581610aef565b92915050565b6000819050919050565b610b2e81610b1b565b8114610b3957600080fd5b50565b600081359050610b4b81610b25565b92915050565b60008060408385031215610b6857610b67610ab8565b5b6000610b7685828601610b06565b9250506020610b8785828601610b3c565b9150509250929050565b60008115159050919050565b610ba681610b91565b82525050565b6000602082019050610bc16000830184610b9d565b92915050565b610bd081610b1b565b82525050565b6000602082019050610beb6000830184610bc7565b92915050565b600080600060608486031215610c0a57610c09610ab8565b5b6000610c1886828701610b06565b9350506020610c2986828701610b06565b9250506040610c3a86828701610b3c565b9150509250925092565b600060ff82169050919050565b610c5a81610c44565b82525050565b6000602082019050610c756000830184610c51565b92915050565b600060208284031215610c9157610c90610ab8565b5b6000610c9f84828501610b06565b91505092915050565b60008060408385031215610cbf57610cbe610ab8565b5b6000610ccd85828601610b06565b9250506020610cde85828601610b06565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d2f57607f821691505b602082108103610d4257610d41610ce8565b5b50919050565b600081905092915050565b50565b6000610d63600083610d48565b9150610d6e82610d53565b600082019050919050565b6000610d8482610d56565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dc882610b1b565b9150610dd383610b1b565b9250828201905080821115610deb57610dea610d8e565b5b92915050565b610dfa81610add565b82525050565b6000602082019050610e156000830184610df1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e5582610b1b565b9150610e6083610b1b565b925082610e7057610e6f610e1b565b5b828204905092915050565b6000610e8682610b1b565b9150610e9183610b1b565b9250828203905081811115610ea957610ea8610d8e565b5b9291505056fea26469706673582212208f4a1b0a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a64736f6c63430008180033'

async function main() {
  console.log('🚀 Setting up test tokens for local development...')
  
  const [deployer] = await ethers.getSigners()
  const network = await ethers.provider.getNetwork()
  
  console.log('Network:', network.name, 'Chain ID:', network.chainId)
  console.log('Deployer:', deployer.address)
  
  // Only run on local network
  if (network.chainId !== 31337n) {
    console.log('⚠️  This script is only for local development (chainId: 31337)')
    console.log('Current network chainId:', network.chainId)
    return
  }
  
  // Test tokens to deploy
  const tokens = [
    { name: 'USD Coin', symbol: 'USDC', decimals: 6 },
    { name: 'Wrapped Ether', symbol: 'WETH', decimals: 18 },
    { name: 'Dai Stablecoin', symbol: 'DAI', decimals: 18 },
    { name: 'Tether USD', symbol: 'USDT', decimals: 6 },
    { name: 'Uniswap', symbol: 'UNI', decimals: 18 }
  ]
  
  const deployedTokens = {}
  
  for (const tokenInfo of tokens) {
    console.log(`\n📝 Deploying ${tokenInfo.name} (${tokenInfo.symbol})...`)
    
    try {
      // Deploy mock token contract (import from mocks directory)
      const MockToken = await ethers.getContractFactory('contracts/mocks/MockERC20.sol:MockERC20')
      const token = await MockToken.deploy(tokenInfo.name, tokenInfo.symbol)
      await token.waitForDeployment()
      
      const tokenAddress = await token.getAddress()
      console.log(`✅ ${tokenInfo.symbol} deployed at: ${tokenAddress}`)
      
      // Mint initial supply to deployer
      const mintAmount = ethers.parseUnits('1000000', tokenInfo.decimals) // 1M tokens
      await token.mint(deployer.address, mintAmount)
      
      const balance = await token.balanceOf(deployer.address)
      console.log(`💰 Minted ${ethers.formatUnits(balance, tokenInfo.decimals)} ${tokenInfo.symbol} to deployer`)
      
      // Fund test accounts
      const testAccounts = [
        '0x70997970C51812dc3A010C7d01b50e0d17dc79C8', // Account #1
        '0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC', // Account #2
        '0x90F79bf6EB2c4f870365E785982E1f101E93b906', // Account #3
        '0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65',  // Account #4
        '0x34e1890734bbB92A206D672b985Fdd0F2Ed579A8'
      ]
      
      const fundAmount = ethers.parseUnits('10000', tokenInfo.decimals) // 10K tokens each
      
      for (const account of testAccounts) {
        await token.transfer(account, fundAmount)
        console.log(`💸 Sent ${ethers.formatUnits(fundAmount, tokenInfo.decimals)} ${tokenInfo.symbol} to ${account}`)
      }
      
      deployedTokens[tokenInfo.symbol] = {
        address: tokenAddress,
        name: tokenInfo.name,
        symbol: tokenInfo.symbol,
        decimals: tokenInfo.decimals
      }
      
    } catch (error) {
      console.error(`❌ Failed to deploy ${tokenInfo.symbol}:`, error.message)
    }
  }
  
  // Save deployed addresses to file
  const fs = require('fs')
  const addressesFile = './deployed-addresses.json'
  
  const deploymentInfo = {
    network: network.name,
    chainId: Number(network.chainId),
    timestamp: new Date().toISOString(),
    deployer: deployer.address,
    tokens: deployedTokens
  }
  
  fs.writeFileSync(addressesFile, JSON.stringify(deploymentInfo, null, 2))
  console.log(`\n📄 Deployment info saved to: ${addressesFile}`)
  
  // Print summary
  console.log('\n🎉 Test token setup completed!')
  console.log('\n📋 Deployed Tokens:')
  for (const [symbol, info] of Object.entries(deployedTokens)) {
    console.log(`${symbol}: ${info.address}`)
  }
  
  console.log('\n💡 You can now use these tokens for testing swaps!')
  console.log('   - Update packages/web/src/config/contracts.ts with these addresses')
  console.log('   - Set NEXT_PUBLIC_USE_LOCAL_CONTRACTS=true in web/.env.local')
  
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('❌ Error:', error)
    process.exit(1)
  })