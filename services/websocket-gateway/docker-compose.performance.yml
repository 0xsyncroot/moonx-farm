version: '3.8'

services:
  # WebSocket Gateway - High Performance Mode
  websocket-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: moonxfarm/websocket-gateway:performance
    restart: unless-stopped
    deploy:
      replicas: 4  # Multiple instances for load balancing
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    environment:
      - NODE_ENV=production
      - PERFORMANCE_MODE=true
      - RATE_LIMITING_ENABLED=false
      - MAX_CONNECTIONS=1000000
      - REDIS_HOST=redis-cluster
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - AUTH_SERVICE_URL=http://auth-service:3001
      - LOG_LEVEL=warn
      - METRICS_ENABLED=true
      - SECURITY_LEVEL=minimal
    ports:
      - "3007:3007"  # WebSocket port
      - "3008:3008"  # HTTP API port
    depends_on:
      - redis-cluster
      - redis-sentinel
    networks:
      - moonxfarm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Redis Cluster for High Performance
  redis-cluster:
    image: redis:7-alpine
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    command: >
      redis-server 
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --tcp-keepalive 60
      --timeout 300
      --tcp-backlog 511
      --databases 16
      --maxclients 65000
      --hz 10
      --dynamic-hz yes
      --rdbcompression yes
      --rdbchecksum yes
      --stop-writes-on-bgsave-error no
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - moonxfarm-network

  # Redis Sentinel for High Availability
  redis-sentinel:
    image: redis:7-alpine
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      redis-sentinel /etc/redis/sentinel.conf
      --sentinel monitor moonxfarm-redis redis-cluster 6379 2
      --sentinel down-after-milliseconds moonxfarm-redis 5000
      --sentinel failover-timeout moonxfarm-redis 10000
      --sentinel parallel-syncs moonxfarm-redis 1
    depends_on:
      - redis-cluster
    networks:
      - moonxfarm-network

  # Load Balancer (HAProxy) for WebSocket Gateway
  loadbalancer:
    image: haproxy:2.8-alpine
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # HAProxy stats
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./ssl:/etc/ssl/certs:ro
    networks:
      - moonxfarm-network
    depends_on:
      - websocket-gateway

  # Prometheus for Metrics (Lightweight)
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - moonxfarm-network

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - moonxfarm-network
    depends_on:
      - prometheus

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  moonxfarm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Performance Configuration
# Environment variables for maximum performance
x-performance-config: &performance-config
  PERFORMANCE_MODE: "true"
  RATE_LIMITING_ENABLED: "false"
  MAX_CONNECTIONS: "1000000"
  SECURITY_LEVEL: "minimal"
  LOG_LEVEL: "warn"
  METRICS_DETAILED: "false"
  COMPRESSION_ENABLED: "false"
  CONNECTION_TIMEOUT: "30000"
  HEARTBEAT_INTERVAL: "30000"
  MAX_PAYLOAD_SIZE: "104857600"  # 100MB
  REDIS_PIPELINE: "true"
  CLUSTER_ENABLED: "true"
  WORKER_THREADS: "auto"

# HAProxy Configuration Template (Create haproxy.cfg)
# global
#   maxconn 100000
#   log stdout local0
#   user haproxy
#   group haproxy
#   daemon

# defaults
#   mode http
#   timeout connect 5000ms
#   timeout client 50000ms
#   timeout server 50000ms
#   option httplog
#   option dontlognull
#   option redispatch
#   retries 3
#   maxconn 50000

# frontend websocket_frontend
#   bind *:80
#   bind *:443 ssl crt /etc/ssl/certs/moonxfarm.pem
#   redirect scheme https if !{ ssl_fc }
#   default_backend websocket_backend

# backend websocket_backend
#   balance roundrobin
#   option httpchk GET /health
#   server ws1 websocket-gateway:3007 check
#   server ws2 websocket-gateway:3007 check
#   server ws3 websocket-gateway:3007 check
#   server ws4 websocket-gateway:3007 check

# stats enable
# stats uri /stats
# stats refresh 30s
# stats admin if TRUE 