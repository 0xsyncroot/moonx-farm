# =============================================================================
# MoonXFarm WebSocket Service - Nginx Configuration (Simplified)
# =============================================================================
# Domain: ws.moonx.farm
# WebSocket Path: /ws
# Optimized for WebSocket connections only
# =============================================================================

# Upstream configuration for WebSocket service
upstream websocket_backend {
    # WebSocket service instances
    server moonx-websocket-service:3008 max_fails=3 fail_timeout=30s;
    
    # Connection pooling for better performance
    keepalive 100;
    keepalive_requests 1000;
    keepalive_timeout 300s;
}

# Map for WebSocket upgrade
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# HTTPS Server (Production)
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name ws.moonx.farm;

    # =============================================================================
    # SSL Configuration
    # =============================================================================
    ssl_certificate      /etc/nginx/certs/moonx.farm.pem;
    ssl_certificate_key  /etc/nginx/certs/moonx.farm.key;
    
    # SSL Security
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # =============================================================================
    # Security Headers
    # =============================================================================
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # =============================================================================
    # Logging
    # =============================================================================
    access_log /var/log/nginx/ws.moonx.farm.access.log combined;
    error_log /var/log/nginx/ws.moonx.farm.error.log warn;

    # =============================================================================
    # WebSocket Proxy Configuration
    # =============================================================================
    location /ws {
        # WebSocket-specific configuration
        proxy_pass http://websocket_backend;
        proxy_http_version 1.1;
        
        # WebSocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # WebSocket timeouts (no limits for persistent connections)
        proxy_connect_timeout 60s;
        proxy_send_timeout 0;
        proxy_read_timeout 0;
        
        # Buffer settings for WebSocket
        proxy_buffering off;
        proxy_cache off;
        proxy_request_buffering off;
        
        # CORS headers for WebSocket
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control, Pragma, Expires, Sec-WebSocket-Protocol, Sec-WebSocket-Key, Sec-WebSocket-Version" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control, Pragma, Expires, Sec-WebSocket-Protocol, Sec-WebSocket-Key, Sec-WebSocket-Version" always;
            add_header Access-Control-Max-Age 86400 always;
            add_header Content-Length 0 always;
            add_header Content-Type "text/plain; charset=utf-8" always;
            return 204;
        }
    }

    # =============================================================================
    # Health Check Endpoint
    # =============================================================================
    location /health {
        proxy_pass http://websocket_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Health check specific headers
        add_header X-Health-Check "websocket-service" always;
    }

    # =============================================================================
    # Root path - Handle WebSocket connections
    # =============================================================================
    location / {
        # Check if it's a WebSocket upgrade request
        set $is_websocket "";
        if ($http_upgrade = "websocket") {
            set $is_websocket "1";
        }
        
        # For WebSocket requests, proxy to /ws internally
        if ($is_websocket = "1") {
            rewrite ^/(.*)$ /ws/$1 last;
        }
        
        # For regular HTTP requests, return service info
        return 200 '{"service":"MoonX WebSocket","websocket_url":"wss://ws.moonx.farm/","health_check":"https://ws.moonx.farm/health","note":"WebSocket connections accepted at root path"}';
        add_header Content-Type application/json;
    }
}

# HTTP Server (Redirect to HTTPS)
server {
    listen 80;
    listen [::]:80;
    server_name ws.moonx.farm;
    
    # Redirect all HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}